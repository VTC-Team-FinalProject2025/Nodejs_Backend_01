import crypto from "crypto";
import { SECURITY_KEY, SECURITY_VECTOR, ALGORITHM } from "../constants";

const key = Buffer.from(SECURITY_KEY || "", "hex");
const iv = Buffer.from(SECURITY_VECTOR || "", "hex");
// üõ† **H√†m m√£ h√≥a: Tr·∫£ v·ªÅ string c√≥ th·ªÉ l∆∞u v√†o DB ho·∫∑c g·ª≠i API**
export function encrypt(text: string | null | undefined): string | null {
    if (!text) return null;
    const cipher = crypto.createCipheriv(ALGORITHM, key, iv);
    let encrypted = cipher.update(text, "utf8", "hex");
    encrypted += cipher.final("hex");
  
    // Chuy·ªÉn th√†nh JSON v√† m√£ h√≥a Base64 ƒë·ªÉ g·ª≠i API ho·∫∑c l∆∞u DB
    const encryptedObject = { encryptedData: encrypted, iv: iv.toString("hex") };
    return Buffer.from(JSON.stringify(encryptedObject)).toString("base64");
  }
  
  // üõ† **H√†m gi·∫£i m√£: Nh·∫≠n string t·ª´ API v√† gi·∫£i m√£**
  export function decrypt(encryptedString: string | null | undefined): string | null {
    if (!encryptedString) return null;
    try {
      // Gi·∫£i m√£ Base64 ‚Üí JSON
      const decoded = JSON.parse(Buffer.from(encryptedString, "base64").toString("utf8"));
  
      // Gi·∫£i m√£ d·ªØ li·ªáu
      const decipher = crypto.createDecipheriv(
        ALGORITHM,
        key,
        Buffer.from(decoded.iv, "hex")
      );
      let decrypted = decipher.update(decoded.encryptedData, "hex", "utf8");
      decrypted += decipher.final("utf8");
  
      return decrypted;
    } catch (error) {
      console.error("L·ªói gi·∫£i m√£:", error);
      return "";
    }
  }
  
//   // üéØ **Th·ª≠ nghi·ªám m√£ h√≥a & gi·∫£i m√£**
//   const originalMessage = "ƒê√¢y l√† tin nh·∫Øn b√≠ m·∫≠t!";
//   const encryptedString = encrypt(originalMessage);
//   console.log("üîí M√£ h√≥a:", encryptedString); // Chu·ªói l∆∞u v√†o DB ho·∫∑c g·ª≠i API
  
//   const decryptedMessage = decrypt(encryptedString);
//   console.log("üîì Gi·∫£i m√£:", decryptedMessage); // "ƒê√¢y l√† tin nh·∫Øn b√≠ m·∫≠t!"
